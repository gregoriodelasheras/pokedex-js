const pokemonRepository = function () { let e; function t(e) { return e.charAt(0).toUpperCase() + e.slice(1) } function o(t) { "object" == typeof t && "name" in t && "detailsUrl" in t ? e.push(t) : console.error("The PokÃ©mon data could not be loaded. Professor Oaks team will fix the problem as soon as possible.") } async function a(e) { const o = e.detailsUrl; try { let a = await fetch(o), i = await a.json(); e.id = i.id, e.name = t(i.name), e.imageUrl = i.sprites.other["official-artwork"].front_default, e.height = i.height / 10, e.weight = i.weight / 10, e.types = [], i.types.forEach(o => { e.types.push(`<span class="${o.type.name}">${t(o.type.name)}</span>`) }), e.abilities = [], i.abilities.forEach(o => { e.abilities.push(t(o.ability.name)) }); const n = `https://pokeapi.co/api/v2/pokemon-species/${e.id}`; try { a = await fetch(n), i = await a.json(), e.specie = i.genera[7].genus; const t = i.flavor_text_entries.filter(e => "en" === e.language.name); e.description = t[t.length - 1].flavor_text.replace(/[\n \f]/g, " ") } catch (e) { console.error(e) } } catch (e) { console.error(e) } } function i(e) { $(".modal-title").empty(), $(".modal-body").empty(), a(e).then(() => { let t; t = e.id < 10 ? `#00${e.id} ${e.name}` : e.id >= 10 && e.id < 100 ? `#0${e.id} ${e.name}` : `#${e.id} ${e.name}`; const o = $("<h1></h1>"); o.text(t); const a = $("<img/>"); a.attr("src", e.imageUrl), a.attr("alt", `Image of ${e.name}`), a.addClass("modal-img pokemon-img"); const i = $(`<p>${e.types.join(" ")}</p>`); i.addClass("text-center"); const n = $("<p></p>"); n.addClass("bold-text text-center"), n.text(e.specie); const s = $(`<p><span class="bold-text">Height:</span> ${e.height} m</p>`), p = $(`<p><span class="bold-text">Weight:</span> ${e.weight} kg</p>`), c = $(`<p><span class="bold-text">Abilities:</span> ${e.abilities.join(" / ")}</p>`), r = $(`<p><em>"${e.description}"</em></p>`); $(".modal-title").append(o), $(".modal-body").append(a, i, n, s, p, c, r), $("#poke-loader").remove() }) } return { loadPokedex: async function (t) { e = []; try { const e = await fetch(t); (await e.json()).results.forEach(e => { o({ name: e.name, detailsUrl: e.url }) }) } catch (e) { console.error(e) } }, addPokemon: o, getPokedex: function () { return e }, addPokedexEntry: function (e) { const o = $("#pokedex"), a = $("<button></button>"); a.attr("type", "button"), a.addClass("btn btn-danger m-2"), a.attr("data-bs-toggle", "modal"), a.attr("data-bs-target", "#pokedexModal"), a.text(t(e.name)), o.append(a), a.on("click", () => { !function () { const e = $(".modal-dialog"), t = $("<div></div>"); t.attr("id", "poke-loader"), e.append(t) }(), i(e) }) }, showPokemon: i, loadPokemonData: a } }(); function pokedexBuilder(e) { pokemonRepository.loadPokedex(e).then(() => { pokemonRepository.getPokedex().forEach(e => { pokemonRepository.addPokedexEntry(e) }) }) } function genSelector(e) { let t; switch (e) { case 1: t = "https://pokeapi.co/api/v2/pokemon/?offset=0&limit=151"; break; case 2: t = "https://pokeapi.co/api/v2/pokemon/?offset=151&limit=100"; break; case 3: t = "https://pokeapi.co/api/v2/pokemon/?offset=251&limit=135"; break; case 4: t = "https://pokeapi.co/api/v2/pokemon/?offset=386&limit=107"; break; case 5: t = "https://pokeapi.co/api/v2/pokemon/?offset=493&limit=156"; break; case 6: t = "https://pokeapi.co/api/v2/pokemon/?offset=649&limit=72"; break; case 7: t = "https://pokeapi.co/api/v2/pokemon/?offset=721&limit=88"; break; case 8: t = "https://pokeapi.co/api/v2/pokemon/?offset=809&limit=89"; break; case "all": t = "https://pokeapi.co/api/v2/pokemon/?offset=0&limit=898" }$("#pokedex").empty(), pokedexBuilder(t) } function filterPokemon() { $(document).ready(() => { $("#search-pokemon").on("keyup", function () { const e = $(this).val().toLowerCase(); $("#pokedex button").filter(function () { return $(this).toggle($(this).text().toLowerCase().indexOf(e) > -1) }) }) }) }